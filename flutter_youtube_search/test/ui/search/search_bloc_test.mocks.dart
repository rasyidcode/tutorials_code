// Mocks generated by Mockito 5.0.10 from annotations
// in github_user_searcch/test/ui/search/search_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:built_collection/src/list.dart' as _i2;
import 'package:github_user_searcch/data/models/search/search_item.dart' as _i5;
import 'package:github_user_searcch/data/repository/youtube_search_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeBuiltList<E> extends _i1.Fake implements _i2.BuiltList<E> {
  @override
  String toString() => super.toString();
}

/// A class which mocks [YoutubeSearchRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockYoutubeSearchRepository extends _i1.Mock
    implements _i3.YoutubeSearchRepository {
  MockYoutubeSearchRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.BuiltList<_i5.SearchItem>> searchVideos(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchVideos, [query]),
              returnValue: Future<_i2.BuiltList<_i5.SearchItem>>.value(
                  _FakeBuiltList<_i5.SearchItem>()))
          as _i4.Future<_i2.BuiltList<_i5.SearchItem>>);
  @override
  _i4.Future<_i2.BuiltList<_i5.SearchItem>> fetchNextVideos() =>
      (super.noSuchMethod(Invocation.method(#fetchNextVideos, []),
              returnValue: Future<_i2.BuiltList<_i5.SearchItem>>.value(
                  _FakeBuiltList<_i5.SearchItem>()))
          as _i4.Future<_i2.BuiltList<_i5.SearchItem>>);
  @override
  void cacheValues({String? query, String? nextPageToken}) =>
      super.noSuchMethod(
          Invocation.method(
              #cacheValues, [], {#query: query, #nextPageToken: nextPageToken}),
          returnValueForMissingStub: null);
}
